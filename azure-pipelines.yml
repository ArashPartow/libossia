trigger:
  branches:
    include:
    - '*'
  tags:
    include:
    - '*'
pr:
  - '*'

variables:
  isGitTag: startsWith(variables['Build.SourceBranch'], 'refs/tags/')

stages:
  - stage: Build
    jobs:
      - job: Unity3DLinux
        displayName: Unity3D (Linux)
        pool:
          vmImage: 'ubuntu-20.04'

        steps:
        - checkout: self
          submodules: true

        - bash: |
            sudo apt install -qq -y build-essential g++ ninja-build
          displayName: Dependencies

        - bash: |
            cd $(System.DefaultWorkingDirectory)
            mkdir build
            cd build
            cmake -GNinja $(Build.SourcesDirectory) -DOSSIA_UNITY3D_ONLY=1 -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release
            cmake --build .
            cmake --build . --target install
          displayName: Build

        - task: PublishPipelineArtifact@1
          inputs:
            targetPath: $(System.DefaultWorkingDirectory)/build/install
            artifactName: libossia-unity3d-linux

      - job: Unity3DMac
        displayName: Unity3D (macOS)
        pool:
          vmImage: 'macos-10.14'

        steps:
        - checkout: self
          submodules: true

        - bash: |
            brew install ninja
          displayName: Dependencies

        - bash: |
            cd $(System.DefaultWorkingDirectory)
            mkdir build
            cd build
            cmake -GNinja $(Build.SourcesDirectory) -DOSSIA_UNITY3D_ONLY=1 -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release
            cmake --build .
            cmake --build . --target install
          displayName: Build

        - task: PublishPipelineArtifact@1
          inputs:
            targetPath: $(System.DefaultWorkingDirectory)/build/install
            artifactName: libossia-unity3d-macos

      - job: Unity3DWin32
        displayName: Unity3D (Win32)
        pool:
          vmImage: 'windows-2019'

        steps:
        - checkout: self
          submodules: true

        - script: |
            cinst -y ninja

        - script: |
            pushd "C:\Program Files (x86)\Microsoft Visual Studio\Installer\"
            for /f "delims=" %%x in ('.\vswhere.exe -latest -property InstallationPath') do set VSPATH=%%x
            popd
            call "%VSPATH%\VC\Auxiliary\Build\vcvarsall.bat" x64

            cd $(System.DefaultWorkingDirectory)
            mkdir build
            cd build
            cmake -GNinja $(Build.SourcesDirectory) -DCMAKE_CXX_COMPILER="cl.exe" -DCMAKE_C_COMPILER="cl.exe" -DOSSIA_UNITY3D_ONLY=1 -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release
            cmake --build .
            cmake --build . --target install
          displayName: Build

        - task: PublishPipelineArtifact@1
          inputs:
            targetPath: $(System.DefaultWorkingDirectory)/build/install
            artifactName: libossia-unity3d-win32

      - job: JavaLinux
        displayName: Java (Linux)
        pool:
          vmImage: 'ubuntu-20.04'

        steps:
        - checkout: self
          submodules: true

        - bash: |
            sudo apt install -qq -y build-essential g++ ninja-build
          displayName: Dependencies

        - bash: |
            cd $(System.DefaultWorkingDirectory)
            mkdir build
            cd build
            cmake -GNinja $(Build.SourcesDirectory) -DOSSIA_JAVA_ONLY=1 -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release
            cmake --build .
            cmake --build . --target install
          displayName: Build

        - task: PublishPipelineArtifact@1
          inputs:
            targetPath: $(System.DefaultWorkingDirectory)/build/install
            artifactName: libossia-java-linux

      - job: JavaMac
        displayName: Java (macOS)
        pool:
          vmImage: 'macos-10.14'

        steps:
        - checkout: self
          submodules: true

        - bash: |
            brew install ninja
          displayName: Dependencies

        - bash: |
            cd $(System.DefaultWorkingDirectory)
            mkdir build
            cd build
            cmake -GNinja $(Build.SourcesDirectory) -DOSSIA_JAVA_ONLY=1 -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release
            cmake --build .
            cmake --build . --target install
          displayName: Build

        - task: PublishPipelineArtifact@1
          inputs:
            targetPath: $(System.DefaultWorkingDirectory)/build/install
            artifactName: libossia-java-macos

      - job: JavaWin32
        displayName: Java (Win32)
        pool:
          vmImage: 'windows-2019'

        steps:
        - checkout: self
          submodules: true

        - script: |
            cinst -y ninja

        - script: |
            pushd "C:\Program Files (x86)\Microsoft Visual Studio\Installer\"
            for /f "delims=" %%x in ('.\vswhere.exe -latest -property InstallationPath') do set VSPATH=%%x
            popd
            call "%VSPATH%\VC\Auxiliary\Build\vcvarsall.bat" x64

            cd $(System.DefaultWorkingDirectory)
            mkdir build
            cd build
            cmake -GNinja $(Build.SourcesDirectory) -DCMAKE_CXX_COMPILER="cl.exe" -DCMAKE_C_COMPILER="cl.exe" -DOSSIA_JAVA_ONLY=1 -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release
            cmake --build .
            cmake --build . --target install
          displayName: Build

        - task: PublishPipelineArtifact@1
          inputs:
            targetPath: $(System.DefaultWorkingDirectory)/build/install
            artifactName: libossia-java-win32

  - stage: Assemble
    # condition: and(succeeded(), eq(variables.isGitTag, true))

    jobs:
      - job: Unity3D
        pool:
          vmImage: 'ubuntu-20.04'

        steps:
        - checkout: none
        - task: DownloadPipelineArtifact@2
          inputs:
            artifact: libossia-unity3d-win32
            path: $(System.DefaultWorkingDirectory)/unity3d-win32
        - task: DownloadPipelineArtifact@2
          inputs:
            artifact: libossia-unity3d-macos
            path: $(System.DefaultWorkingDirectory)/unity3d-macos
        - task: DownloadPipelineArtifact@2
          inputs:
            artifact: libossia-unity3d-linux
            path: $(System.DefaultWorkingDirectory)/unity3d-linux

        - bash: |
            echo "Does ninja still exist"
            find /usr -name ninja

            cd $(System.DefaultWorkingDirectory)
            mkdir ./unity3d-linux/ossia-unity/Assets/Plugins/x86_64
            cp -rf ./unity3d-macos/ossia-unity/Assets/Plugins/ossia.bundle ./unity3d-linux/ossia-unity/Assets/Plugins
            cp -rf ./unity3d-win32/ossia-unity/Assets/Plugins/x86_64/libossia.dll ./unity3d-linux/ossia-unity/Assets/Plugins/x86_64

            pushd ./unity3d-linux/ossia-unity/
            zip -r ossia-unity3d.zip *
            GIT_TAG=$(git describe --exact-match $(Build.SourceVersion))
            if [[ "x$GIT_TAG" != "x" ]]; then
              mv ossia-unity3d.zip $(System.DefaultWorkingDirectory)/ossia-unity3d-$GIT_TAG.zip
            fi
            popd
          displayName: Package

        - task: PublishPipelineArtifact@1
          inputs:
            targetPath: $(System.DefaultWorkingDirectory)/ossia-unity3d.zip
            artifactName: ossia-unity3d

        # - task: GitHubRelease@1
        #   inputs:
        #     gitHubConnection: github.com_jcelerier
        #     repositoryName: ossia/libossia
        #     action: 'edit'
        #     target: '$(Build.SourceVersion)'
        #     tagSource: 'gitTag'
        #     assetUploadMode: 'replace'
        #     isDraft: true
        #     assets: |
        #       $(System.DefaultWorkingDirectory)/*.zip
      - job: Java
        pool:
          vmImage: 'ubuntu-20.04'

        steps:
        - task: DownloadPipelineArtifact@2
          inputs:
            artifact: libossia-java-win32
            path: $(System.DefaultWorkingDirectory)/java-win32
        - task: DownloadPipelineArtifact@2
          inputs:
            artifact: libossia-java-macos
            path: $(System.DefaultWorkingDirectory)/java-macos
        - task: DownloadPipelineArtifact@2
          inputs:
            artifact: libossia-java-linux
            path: $(System.DefaultWorkingDirectory)/java-linux

        - bash: |
            echo "Does ninja still exist"
            find /usr -name ninja

            cd $(System.DefaultWorkingDirectory)

            pushd java-macos
            unzip -n ossia-java.jar
            rm *.jar
            popd

            pushd java-win32
            unzip -n ossia-java.jar
            rm *.jar
            popd

            pushd java-linux
            unzip -n ossia-java.jar
            rm *.jar
            cp -rf ../java-macos/* .
            cp -rf ../java-win32/* .
            zip ossia-java.jar *
            zip -r ossia-java.zip ossia-java.jar

            GIT_TAG=$(git describe --exact-match $(Build.SourceVersion))
            if [[ "x$GIT_TAG" != "x" ]]; then
              mv ossia-java.zip $(System.DefaultWorkingDirectory)/ossia-java-$GIT_TAG.zip
            fi
            popd
          displayName: Package

        - task: PublishPipelineArtifact@1
          inputs:
            targetPath: $(System.DefaultWorkingDirectory)/ossia-java*.zip
            artifactName: ossia-java

        # - task: GitHubRelease@1
        #   inputs:
        #     gitHubConnection: github.com_jcelerier
        #     repositoryName: ossia/libossia
        #     action: 'edit'
        #     target: '$(Build.SourceVersion)'
        #     tagSource: 'gitTag'
        #     assetUploadMode: 'replace'
        #     isDraft: true
        #     assets: |
        #       $(System.DefaultWorkingDirectory)/*.zip