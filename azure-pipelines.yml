trigger:
- master

stages:
  - stage: Build
    jobs: 
      - job: Unity3DLinux        
        displayName: Unity3D (Linux)
        pool:
          vmImage: 'ubuntu-20.04'

        steps:
        - bash: |
            sudo apt install -qq -y build-essential g++ ninja-build 
          displayName: Dependencies
        
        - bash: |
            cd $(System.DefaultWorkingDirectory)
            mkdir build
            cd build
            cmake -GNinja $(Build.SourcesDirectory) -DOSSIA_UNITY3D_ONLY=1 -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release
            cmake --build . 
            cmake --build . --target install
          displayName: Build
        
        - task: PublishPipelineArtifact@1
          inputs:
            targetPath: $(System.DefaultWorkingDirectory)/build/install
            artifactName: libossia-unity3d-linux

      - job: Unity3DMac        
        displayName: Unity3D (macOS)
        pool:
          vmImage: 'macos-10.14'

        steps:
        - bash: |
            brew install ninja
          displayName: Dependencies
        
        - bash: |
            cd $(System.DefaultWorkingDirectory)
            mkdir build
            cd build
            cmake -GNinja $(Build.SourcesDirectory) -DOSSIA_UNITY3D_ONLY=1 -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release
            cmake --build . 
            cmake --build . --target install
          displayName: Build
        
        - task: PublishPipelineArtifact@1
          inputs:
            targetPath: $(System.DefaultWorkingDirectory)/build/install
            artifactName: libossia-unity3d-macos
            
      - job: Unity3DWin32       
        displayName: Unity3D (Win32) 
        pool:
          vmImage: 'windows-2019'

        steps:
        - script: |
            cinst -y ninja
        
        - script: |
            pushd "C:\Program Files (x86)\Microsoft Visual Studio\Installer\"
            for /f "delims=" %%x in ('.\vswhere.exe -latest -property InstallationPath') do set VSPATH=%%x
            popd
            call "%VSPATH%\VC\Auxiliary\Build\vcvarsall.bat" x64
            
            cd $(System.DefaultWorkingDirectory)
            mkdir build
            cd build
            cmake -GNinja $(Build.SourcesDirectory) -DCMAKE_CXX_COMPILER="cl.exe" -DCMAKE_C_COMPILER="cl.exe" -DOSSIA_UNITY3D_ONLY=1 -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release
            cmake --build . 
            cmake --build . --target install
          displayName: Build
        
        - task: PublishPipelineArtifact@1
          inputs:
            targetPath: $(System.DefaultWorkingDirectory)/build/install
            artifactName: libossia-unity3d-win32
  
  - stage: Assemble        
    jobs: 
      - job: Unity3D
        pool:
          vmImage: 'ubuntu-20.04'

        steps:      
        - task: DownloadPipelineArtifact@2
          inputs:
            artifact: libossia-unity3d-win32
            path: $(System.DefaultWorkingDirectory)/unity3d-win32
        - task: DownloadPipelineArtifact@2
          inputs:
            artifact: libossia-unity3d-macos
            path: $(System.DefaultWorkingDirectory)/unity3d-macos
        - task: DownloadPipelineArtifact@2
          inputs:
            artifact: libossia-unity3d-linux
            path: $(System.DefaultWorkingDirectory)/unity3d-linux
        
        - bash: |
            echo "Does ninja still exist"
            find /usr -name ninja

            cd $(System.DefaultWorkingDirectory)
            mkdir ./unity3d-linux/ossia-unity/Assets/Plugins/x86_64
            cp -rf ./unity3d-macos/ossia-unity/Assets/Plugins/ossia.bundle ./unity3d-linux/ossia-unity/Assets/Plugins
            cp -rf ./unity3d-win32/ossia-unity/Assets/Plugins/x86_64/libossia.dll ./unity3d-linux/ossia-unity/Assets/Plugins/x86_64

            pushd ./unity3d-linux/ossia-unity/
            zip -r ossia-unity3d.zip *
            mv ossia-unity3d.zip $(System.DefaultWorkingDirectory)/
            popd
          displayName: Package
        
        - task: PublishPipelineArtifact@1
          inputs:
            targetPath: $(System.DefaultWorkingDirectory)/ossia-unity3d.zip
            artifactName: ossia-unity3d
        
  ## Deploy ##
        
      