trigger:
  branches:
    include:
    - '*'
  tags:
    include:
    - '*'
pr:
  - '*'


variables:
  isGitTag: $[startsWith(variables['Build.SourceBranch'], 'refs/tags/')]
  gitTag: $[replace(variables['Build.SourceBranch'], 'refs/tags/', '')]

stages:
  - stage: Build
    jobs:
      - job: build_benchmark_ubuntu
        displayName: Benchmarks
        pool:
          vmImage: 'ubuntu-20.04'

        steps:
        - checkout: self
          submodules: true

        - bash: |
            sudo apt install -qq -y build-essential g++ ninja-build libbenchmark-dev
          displayName: Dependencies

        - bash: |
            echo $(variables.gitTag)
            cd $(System.DefaultWorkingDirectory)
            mkdir build
            cd build
            cmake -Wno-dev -GNinja $(Build.SourcesDirectory) -DCMAKE_BUILD_TYPE=Release -DOSSIA_STATIC=1 -DOSSIA_TESTING=1 -DOSSIA_BENCHMARKS=1 -DOSSIA_EDITOR=0 -DOSSIA_DATAFLOW=0 -DOSSIA_PROTOCOL_AUDIO=0 -DOSSIA_PROTOCOL_JOYSTICK=0 -DOSSIA_PROTOCOL_WIIMOTE=0 -DOSSIA_PROTOCOL_ARTNET=0
            cmake --build . --target ossia_DeviceBenchmark

          displayName: Build

        - task: PublishPipelineArtifact@1
          inputs:
            targetPath: $(System.DefaultWorkingDirectory)/build/tests/ossia_DeviceBenchmark
            artifactName: libossia-device-bench

      - job: Unity3DLinux
        displayName: Unity3D (Linux)
        pool:
          vmImage: 'ubuntu-20.04'

        steps:
        - checkout: self
          submodules: true

        - bash: |
            sudo apt install -qq -y build-essential g++ ninja-build
          displayName: Dependencies

        - bash: |
            echo $(variables.gitTag)
            cd $(System.DefaultWorkingDirectory)
            mkdir build
            cd build
            cmake -GNinja $(Build.SourcesDirectory) -DOSSIA_UNITY3D_ONLY=1 -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release
            cmake --build .
            cmake --build . --target install
          displayName: Build

        - task: PublishPipelineArtifact@1
          inputs:
            targetPath: $(System.DefaultWorkingDirectory)/build/install
            artifactName: libossia-unity3d-linux

      - job: Unity3DMac
        displayName: Unity3D (macOS)
        pool:
          vmImage: 'macos-10.14'

        steps:
        - checkout: self
          submodules: true

        - bash: |
            brew install ninja
          displayName: Dependencies

        - bash: |
            cd $(System.DefaultWorkingDirectory)
            mkdir build
            cd build
            cmake -GNinja $(Build.SourcesDirectory) -DOSSIA_UNITY3D_ONLY=1 -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release
            cmake --build .
            cmake --build . --target install
          displayName: Build

        - task: PublishPipelineArtifact@1
          inputs:
            targetPath: $(System.DefaultWorkingDirectory)/build/install
            artifactName: libossia-unity3d-macos

      - job: Unity3DWin32
        displayName: Unity3D (Win32)
        pool:
          vmImage: 'windows-2019'

        steps:
        - checkout: self
          submodules: true

        - script: |
            cinst -y ninja

        - script: |
            pushd "C:\Program Files (x86)\Microsoft Visual Studio\Installer\"
            for /f "delims=" %%x in ('.\vswhere.exe -latest -property InstallationPath') do set VSPATH=%%x
            popd
            call "%VSPATH%\VC\Auxiliary\Build\vcvarsall.bat" x64

            cd $(System.DefaultWorkingDirectory)
            mkdir build
            cd build
            cmake -GNinja $(Build.SourcesDirectory) -DCMAKE_CXX_COMPILER="cl.exe" -DCMAKE_C_COMPILER="cl.exe" -DOSSIA_UNITY3D_ONLY=1 -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release
            cmake --build .
            cmake --build . --target install
          displayName: Build

        - task: PublishPipelineArtifact@1
          inputs:
            targetPath: $(System.DefaultWorkingDirectory)/build/install
            artifactName: libossia-unity3d-win32

      - job: JavaLinux
        displayName: Java (Linux)
        pool:
          vmImage: 'ubuntu-20.04'

        steps:
        - checkout: self
          submodules: true

        - bash: |
            sudo apt install -qq -y build-essential g++ ninja-build openjdk-8-jdk-headless
          displayName: Dependencies

        - bash: |
            cd $(System.DefaultWorkingDirectory)
            mkdir build
            cd build
            cmake -GNinja $(Build.SourcesDirectory) -DJAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64 -DOSSIA_JAVA_ONLY=1 -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release
            cmake --build .
            cmake --build . --target install
          displayName: Build

        - task: PublishPipelineArtifact@1
          inputs:
            targetPath: $(System.DefaultWorkingDirectory)/build/install
            artifactName: libossia-java-linux

      - job: JavaMac
        displayName: Java (macOS)
        pool:
          vmImage: 'macos-10.14'

        steps:
        - checkout: self
          submodules: true

        - bash: |
            brew install ninja
            brew cask install adoptopenjdk8
          displayName: Dependencies

        - bash: |
            cd $(System.DefaultWorkingDirectory)
            mkdir build
            cd build
            export JAVA_HOME=$(/usr/libexec/java_home -v 1.8)
            echo "JAVA_HOME: $JAVA_HOME"
            cmake -GNinja $(Build.SourcesDirectory) -DJAVA_HOME=$JAVA_HOME -DOSSIA_JAVA_ONLY=1 -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release
            cmake --build .
            cmake --build . --target install
          displayName: Build

        - task: PublishPipelineArtifact@1
          inputs:
            targetPath: $(System.DefaultWorkingDirectory)/build/install
            artifactName: libossia-java-macos

      - job: JavaWin32
        displayName: Java (Win32)
        pool:
          vmImage: 'windows-2019'

        steps:
        - checkout: self
          submodules: true

        - script: |
            cinst -y ninja
            cinst -y jdk8

        - script: |
            pushd "C:\Program Files (x86)\Microsoft Visual Studio\Installer\"
            for /f "delims=" %%x in ('.\vswhere.exe -latest -property InstallationPath') do set VSPATH=%%x
            popd
            call "%VSPATH%\VC\Auxiliary\Build\vcvarsall.bat" x64

            cd $(System.DefaultWorkingDirectory)
            mkdir build
            cd build
            cmake -GNinja $(Build.SourcesDirectory) -DJAVA_HOME="c:\Program Files\Java\jdk1.8.0_211" -DCMAKE_CXX_COMPILER="cl.exe" -DCMAKE_C_COMPILER="cl.exe" -DOSSIA_JAVA_ONLY=1 -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release
            cmake --build .
            cmake --build . --target install
          displayName: Build

        - task: PublishPipelineArtifact@1
          inputs:
            targetPath: $(System.DefaultWorkingDirectory)/build/install
            artifactName: libossia-java-win32

  - stage: Assemble
    condition: and(succeeded(), eq(variables.isGitTag, true))

    jobs:
      - job: Unity3D
        pool:
          vmImage: 'ubuntu-20.04'

        steps:
        - checkout: none
        - task: DownloadPipelineArtifact@2
          inputs:
            artifact: libossia-unity3d-win32
            path: $(System.DefaultWorkingDirectory)/unity3d-win32
        - task: DownloadPipelineArtifact@2
          inputs:
            artifact: libossia-unity3d-macos
            path: $(System.DefaultWorkingDirectory)/unity3d-macos
        - task: DownloadPipelineArtifact@2
          inputs:
            artifact: libossia-unity3d-linux
            path: $(System.DefaultWorkingDirectory)/unity3d-linux

        - bash: |
            cd $(System.DefaultWorkingDirectory)
            mkdir -p ./unity3d-linux/ossia-unity/Assets/Plugins/x86_64/
            cp -rf ./unity3d-macos/ossia-unity/Assets/Plugins/ossia.bundle ./unity3d-linux/ossia-unity/Assets/Plugins/x86_64/
            cp -rf ./unity3d-win32/ossia-unity/Assets/Plugins/x86_64/libossia.dll ./unity3d-linux/ossia-unity/Assets/Plugins/x86_64/

            pushd ./unity3d-linux/ossia-unity/
            zip -r ossia-unity3d.zip *

            mv ossia-unity3d.zip $(System.DefaultWorkingDirectory)/ossia-unity3d.zip
            popd
          displayName: Package

        - task: PublishPipelineArtifact@1
          inputs:
            targetPath: $(System.DefaultWorkingDirectory)/ossia-unity3d.zip
            artifactName: ossia-unity3d

        - task: GitHubRelease@1
          inputs:
            gitHubConnection: github.com_jcelerier
            repositoryName: ossia/libossia
            action: 'edit'
            target: '$(Build.SourceVersion)'
            tagSource: 'gitTag'
            assetUploadMode: 'replace'
            isDraft: true
            assets: $(System.DefaultWorkingDirectory)/ossia-unity3d.zip

      - job: Java
        pool:
          vmImage: 'ubuntu-20.04'

        steps:
        - task: DownloadPipelineArtifact@2
          inputs:
            artifact: libossia-java-win32
            path: $(System.DefaultWorkingDirectory)/java-win32
        - task: DownloadPipelineArtifact@2
          inputs:
            artifact: libossia-java-macos
            path: $(System.DefaultWorkingDirectory)/java-macos
        - task: DownloadPipelineArtifact@2
          inputs:
            artifact: libossia-java-linux
            path: $(System.DefaultWorkingDirectory)/java-linux

        - bash: |
            cd $(System.DefaultWorkingDirectory)

            pushd java-macos
            unzip -n ossia-java.jar
            popd

            pushd java-win32
            unzip -n ossia-java.jar
            popd

            pushd java-linux
            cp -rf ../java-macos/darwin .
            cp -rf ../java-win32/win32-x86_64 .
            unzip -n ossia-java.jar
            rm ossia-java.jar
            zip -r ossia-java.jar darwin win32-x86_64 linux-x86-64 io META-INF
            zip -r ossia-java.zip ossia-java.jar ossia-java-example.jar jna.jar

            mv ossia-java.zip $(System.DefaultWorkingDirectory)/ossia-java.zip
            popd
          displayName: Package

        - task: PublishPipelineArtifact@1
          inputs:
            targetPath: $(System.DefaultWorkingDirectory)/ossia-java.zip
            artifactName: ossia-java

        - task: GitHubRelease@1
          inputs:
            gitHubConnection: github.com_jcelerier
            repositoryName: ossia/libossia
            action: 'edit'
            target: '$(Build.SourceVersion)'
            tagSource: 'gitTag'
            assetUploadMode: 'replace'
            isDraft: true
            assets: $(System.DefaultWorkingDirectory)/ossia-java.zip

  - stage: Benchmark
    jobs:
    - job: ubuntu_RunBenchmarks_selfhosted
      dependsOn: build_benchmark_ubuntu
      pool:
        demands:
          - agent.os -equals Linux # On demande un runner linux
          - StabilizerServer       # On veut que l'adresse ip du serveur de stabilisation soit disponible (et donc supporté)
      steps:
      - script: curl http://$(StabilizerServer):7373/acquire # On stabilise la machine
        displayName: 'Tune system performance'
    
      - download: current
        artifact: libossia-device-bench
    
      - script: |
          ls
          mkdir results
          chmod +x ossia_DeviceBenchmark
          ossia_DeviceBenchmark
        env: # Pour configurer l'output des benchs, a adapter en fonction de la lib
          BENCHMARK_FORMAT: 'json'
          BENCHMARK_OUT: 'results/$(LambdaProjectName)-benchmarks-results.json'
        displayName: 'Run benchmarks'
      - publish: results # On publie les résultats en tant qu'artifacts, on les enverra a calcite dans un autre job
        artifact: benchResults_selfhosted
        
      - script:  curl http://$(StabilizerServer):7373/release # Quoiqu'il arrive, remettre la machine en état
        condition: always()
        displayName: 'Reset system performance'
