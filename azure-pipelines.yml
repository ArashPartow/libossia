trigger:
- master

stages:
  - stage: build
    displayName: Build packages
    jobs: 
      - job: build
        strategy:
          matrix:
            linux:
              imageName: 'ubuntu-20.04'
            mac:
              imageName: 'macos-10.14'
            windows:
              imageName: 'windows-2019'
        
        steps:
        ## Install packages ##
        - bash: |
            sudo apt install -qq -y build-essential g++ ninja-build 
          displayName: Dependencies
          condition: eq( variables['Agent.OS'], 'Linux' )
        - bash: |
            brew install ninja
          displayName: Dependencies
          condition: eq( variables['Agent.OS'], 'Darwin' )
        - powershell: |
            cinst -y ninja
          condition: eq( variables['Agent.OS'], 'Windows_NT' )
        
        ## Build ##
        - bash: |
            cd $(System.DefaultWorkingDirectory)
            mkdir build
            cd build
            cmake -GNinja $(Build.SourcesDirectory) -DOSSIA_UNITY3D_ONLY=1 -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release
            cmake --build . 
            cmake --build . --target install
          displayName: Build
        
        ## Assemble ##
        # Publish the artefacts
        - task: PublishPipelineArtifact@1
          condition: eq( variables['Agent.OS'], 'Windows_NT' )
          inputs:
            targetPath: $(System.DefaultWorkingDirectory)/build/install
            artifactName: libossia-win32
        - task: PublishPipelineArtifact@1
          condition: eq( variables['Agent.OS'], 'Darwin' )
          inputs:
            targetPath: $(System.DefaultWorkingDirectory)/build/install
            artifactName: libossia-macos
        - task: PublishPipelineArtifact@1
          condition: eq( variables['Agent.OS'], 'Darwin' )
          inputs:
            targetPath: $(System.DefaultWorkingDirectory)/build/install
            artifactName: libossia-linux
  
  - stage: assemble
    displayName: Assemble packages
    dependsOn: string | [ string ]
    condition: string
    jobs: 
      - job: deps
        strategy:
          matrix:
            linux:
              imageName: 'ubuntu-20.04'
        steps:      
        # Download them to the Linux system
        - task: DownloadPipelineArtifact@2
          inputs:
            artifact: libossia-win32
            path: $(System.DefaultWorkingDirectory)/win32
        - task: DownloadPipelineArtifact@2
          inputs:
            artifact: libossia-macos
            path: $(System.DefaultWorkingDirectory)/macos
        - task: DownloadPipelineArtifact@2
          inputs:
            artifact: libossia-linux
            path: $(System.DefaultWorkingDirectory)/linux
        
        - bash: |
            cd $(Build.SourcesDirectory)
            cd build
            find .
          displayName: Package
        
  ## Deploy ##
        
      













  #  condition: eq( variables['Agent.OS'], 'Linux' )
  #  displayName: Get IP on Linux
  ## macOS
  #- bash: |
  #    export IPADDR=$(ifconfig | grep 'en0' -A3 | tail -n1 | awk '{print $2}')
  #    echo "##vso[task.setvariable variable=IP_ADDR]$IPADDR"
  #  condition: eq( variables['Agent.OS'], 'Darwin' )

#  displayName: Get IP on macOS
## Windows
#- powershell: |
#    Set-Variable -Name IPADDR -Value ((Get-NetIPAddress | ?{ $_.AddressFamily -eq "IPv4" -and !($_.IPAddress -match "169") -and !($_.IPaddress -match "127") } | Select-Object -First 1).IPAddress)
#    Write-Host "##vso[task.setvariable variable=IP_ADDR]$IPADDR"
#  condition: eq( variables['Agent.OS'], 'Windows_NT' )
#  displayName: Get IP on Windows
#
# now we use the value, no matter where we got it
#- script: |
#    echo The IP address is $(IP_ADDR)

# steps:
# - task: NodeTool@0
#   inputs:
#     versionSpec: '8.x'
# 
# - script: |
#     npm install
#     npm test
# 
# - task: PublishTestResults@2
#   inputs:
#     testResultsFiles: '**/TEST-RESULTS.xml'
#     testRunTitle: 'Test results for JavaScript'
# 
# - task: PublishCodeCoverageResults@1
#   inputs: 
#     codeCoverageTool: Cobertura
#     summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/*coverage.xml'
#     reportDirectory: '$(System.DefaultWorkingDirectory)/**/coverage'
# 
# - task: ArchiveFiles@2
#   inputs:
#     rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
#     includeRootFolder: false
# 
# - task: PublishBuildArtifacts@1
# 