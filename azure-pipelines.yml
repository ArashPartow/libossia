# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

strategy:
  matrix:
    linux:
      imageName: 'ubuntu-20.04'
    mac:
      imageName: 'macos-10.14'
    windows:
      imageName: 'windows-2019'

trigger:
- master

pool:
  vmImage: $(imageName)

steps:
# Linux
- bash: |
    cd $(Build.SourcesDirectory)
    mkdir build
    cd build
    cmake -GNinja .. -DOSSIA_UNITY3D_ONLY=1 -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release
    cmake --build . 
    cmake --build . --target install
  displayName: Build

#- task: PublishPipelineArtifact@1
#  inputs:
#    targetPath: $(System.DefaultWorkingDirectory)/build/install
#    artifactName: libossia-linux
#  condition: eq( variables['Agent.OS'], 'Linux' )

# Publish the artefacts from the Windows and Mac system
- task: PublishPipelineArtifact@1
  condition: eq( variables['Agent.OS'], 'Windows_NT' )
  inputs:
    targetPath: $(System.DefaultWorkingDirectory)/build/install
    artifactName: libossia-win32
- task: PublishPipelineArtifact@1
  condition: eq( variables['Agent.OS'], 'Darwin' )
  inputs:
    targetPath: $(System.DefaultWorkingDirectory)/build/install
    artifactName: libossia-macos
  
# Download them to the Linux system
- task: DownloadPipelineArtifact@2
  condition: eq( variables['Agent.OS'], 'Linux' )
  inputs:
    artifact: libossia-win32
    #patterns: '**/*.js'
    path: $(Build.SourcesDirectory)/build/install/win32
- task: DownloadPipelineArtifact@2
  condition: eq( variables['Agent.OS'], 'Linux' )
  inputs:
    artifact: libossia-macos
    #patterns: '**/*.js'
    path: $(Build.SourcesDirectory)/build/install/macos

- bash: |
    cd $(Build.SourcesDirectory)
    cd build
    find .
  displayName: Package
  condition: eq( variables['Agent.OS'], 'Linux' )
#  condition: eq( variables['Agent.OS'], 'Linux' )
#  displayName: Get IP on Linux
## macOS
#- bash: |
#    export IPADDR=$(ifconfig | grep 'en0' -A3 | tail -n1 | awk '{print $2}')
#    echo "##vso[task.setvariable variable=IP_ADDR]$IPADDR"
#  condition: eq( variables['Agent.OS'], 'Darwin' )
#  displayName: Get IP on macOS
## Windows
#- powershell: |
#    Set-Variable -Name IPADDR -Value ((Get-NetIPAddress | ?{ $_.AddressFamily -eq "IPv4" -and !($_.IPAddress -match "169") -and !($_.IPaddress -match "127") } | Select-Object -First 1).IPAddress)
#    Write-Host "##vso[task.setvariable variable=IP_ADDR]$IPADDR"
#  condition: eq( variables['Agent.OS'], 'Windows_NT' )
#  displayName: Get IP on Windows
#
# now we use the value, no matter where we got it
#- script: |
#    echo The IP address is $(IP_ADDR)

# steps:
# - task: NodeTool@0
#   inputs:
#     versionSpec: '8.x'
# 
# - script: |
#     npm install
#     npm test
# 
# - task: PublishTestResults@2
#   inputs:
#     testResultsFiles: '**/TEST-RESULTS.xml'
#     testRunTitle: 'Test results for JavaScript'
# 
# - task: PublishCodeCoverageResults@1
#   inputs: 
#     codeCoverageTool: Cobertura
#     summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/*coverage.xml'
#     reportDirectory: '$(System.DefaultWorkingDirectory)/**/coverage'
# 
# - task: ArchiveFiles@2
#   inputs:
#     rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
#     includeRootFolder: false
# 
# - task: PublishBuildArtifacts@1
# 