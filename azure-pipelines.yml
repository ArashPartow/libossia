trigger:
  branches:
    include:
    - '*'
  tags:
    include:
    - '*'
pr:
  - '*'


variables:
  isGitTag: $[startsWith(variables['Build.SourceBranch'], 'refs/tags/')]
  gitTag: $[replace(variables['Build.SourceBranch'], 'refs/tags/', '')]

stages:
  - stage: Build
    jobs:
      - job: MaxWin64
        displayName: ossia-max (Win64)
        pool:
          vmImage: 'windows-2019'

        steps:
        - checkout: self
          submodules: true

        - script: |
            cinst -y ninja

        - script: |
            pushd "C:\Program Files (x86)\Microsoft Visual Studio\Installer\"
            for /f "delims=" %%x in ('.\vswhere.exe -latest -property InstallationPath') do set VSPATH=%%x
            popd
            call "%VSPATH%\VC\Auxiliary\Build\vcvarsall.bat" x64

            cd $(System.DefaultWorkingDirectory)
            mkdir build
            cd build
            cmake -GNinja $(Build.SourcesDirectory) -DOSSIA_MAX_ONLY=1 -DCMAKE_SYSTEM_VERSION=7 -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release
            cmake --build .
            cmake --build . --target install
          displayName: Build

        - task: PublishPipelineArtifact@1
          inputs:
            targetPath: $(System.DefaultWorkingDirectory)/build/install/ossia-max-package
            artifactName: libossia-max-win64

  - stage: Assemble
    condition: succeeded()
    # see https://github.com/microsoft/azure-pipelines-tasks/tree/master/Tasks/GitHubReleaseV1

    variables:
      $[ if eq(variables['isGitTag'], true) ]:
        releaseTag: '$(gitTag)'
      $[ if eq(variables['isGitTag'], false) ]:
        releaseTag: latest-ci-build

    jobs:
      - job: Max
        pool:
          vmImage: 'ubuntu-20.04'

        steps:
        - task: DownloadPipelineArtifact@2
          inputs:
            artifact: libossia-max-win64
            path: $(System.DefaultWorkingDirectory)
        - task: DownloadPipelineArtifact@2
          inputs:
            artifact: libossia-max-macos
            path: $(System.DefaultWorkingDirectory)

        - bash: |
            if [[Â "$isGitTAG" -eq "true" ]]
            then
              RELEASE_NAME=$gitTag
            else
              RELEASE_NAME="latest-ci-build"
            fi
            echo "##vso[task.setvariable variable=releaseName;]$RELEASE_NAME"
            echo "releaseName value is $(releaseName)"
          displayName: Set Release Name

        - bash: |
            echo "Release Tag: ${releaseTag}, gitTag: ${gitTag}"
            cd $(System.DefaultWorkingDirectory)
            zip -r ossia-max.zip ossia
          displayName: Package

        - task: PublishPipelineArtifact@1
          inputs:
            targetPath: $(System.DefaultWorkingDirectory)/ossia-max.zip
            artifactName: ossia-max

        - task: GitHubRelease@1
          inputs:
            gitHubConnection: github.com_jcelerier
            repositoryName: ossia/libossia
            action: 'edit'
            target: '$(Build.SourceVersion)'
            tagSource: userSpecifiedTag
            tag: '$(releaseName)'
            assetUploadMode: 'replace'
            assets: $(System.DefaultWorkingDirectory)/ossia-max.zip
