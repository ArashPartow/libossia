#N canvas 507 46 815 694 10;
#X msg 125 587 expose oscquery;
#X msg 113 557 expose;
#X text 30 589 for example;
#X text 232 587 will use oscquery portocol and default ports.;
#X text 168 556 (click to get help in Pd's console);
#N canvas 150 42 356 200 some_nodes 0;
#X obj 109 61 ossia.param dummy;
#X obj 109 81 ossia.param foo;
#X obj 109 101 ossia.param bar;
#N canvas 148 265 358 226 model 0;
#X obj 101 109 ossia.model fruh;
#X obj 102 164 ossia.param stuck;
#X text 18 137 Here \, the stuck parameter is placed under the fruh
node;
#X text 20 22 The [ossia.model] object allows to nest (or group) parameters
under a sub-node This can be done recursively with sub-models in further
sub-patchers, f 53;
#X restore 109 152 pd model;
#X text 36 25 see [ossia.param] help for more info and options;
#X restore 356 184 pd some_nodes;
#X msg 63 316 namespace;
#X msg 165 366 name;
#X obj 63 438 print;
#X obj 63 418 route namespace name;
#X symbolatom 121 471 15 0 0 2 name - -, f 15;
#X obj 121 439 symbol;
#X msg 98 343 name funny_name;
#X text 314 611 will use oscquery portocol with OSC port 1234 and WS
port 5678, f 31;
#X msg 152 617 expose oscquery 1234 9876;
#X obj 112 653 ø;
#X obj 63 396 ossia;
#X text 203 366 or retrieved;
#X text 29 19 ossia-pd is the implementation of libossia for pd - several
other implementations of libossia are available for various environments
\, such as openFrameworks \, C'74's Max \, python \, Qt \, plain C
\, etc... for more info \, see: https://ossia.github.io, f 121;
#X text 28 64 libossia allows to declare a functional architecture
as a tree of nodes and parameters. These nodes and parameters can have
attributes \, which allow to declare some of their properties \, such
as their values \, datatypes \, units \, ranges \, etc..., f 122;
#X text 28 101 this tree-based architecture (coined "device" in the
OSSIA parlance) can then be exposed under several protocols \, some
of which allow this architecture \, and the properties and values of
its nodes \, to be explored and queried for now \, protocols available
in pd are plain OSC \, OSCquery \, and Minuit - more are to come,
f 122;
#X text 27 185 Look into that subpatch to see how nodes are declared:
;
#X text 128 315 it allows to get the namespace \, i.e. the list of
the adresses registered to the global device., f 96;
#X text 204 342 its name can also be changed;
#X text 32 530 The global namespace can exposed over the network :
;
#X text 474 415 NB: all ossia-pd objects can indifferently be named:
;
#X text 623 440 [ossia.theNameOftheObject];
#X text 624 460 [ø.theNameOftheObject];
#X text 27 244 All the nodes (models \, params \, see below) in pd
that haven't been explicitly registered under an [ossia.device] object
\, are automatically declared under a general device, f 100;
#X text 27 280 The ossia object allows to manage this general device
, f 100;
#X text 26 213 ________________________________________________________________________________________________________________
, f 122;
#X text 26 151 ________________________________________________________________________________________________________________
, f 122;
#X text 31 496 ________________________________________________________________________________________________________________
, f 122;
#X connect 0 0 15 0;
#X connect 1 0 15 0;
#X connect 6 0 16 0;
#X connect 7 0 16 0;
#X connect 9 0 8 0;
#X connect 9 1 11 0;
#X connect 11 0 10 0;
#X connect 12 0 16 0;
#X connect 14 0 15 0;
#X connect 16 0 9 0;
