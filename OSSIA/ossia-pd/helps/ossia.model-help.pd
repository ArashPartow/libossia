#N canvas 450 393 662 370 10;
#X msg 103 184 namespace;
#X obj 41 131 ossia.param foo;
#N canvas 31 163 233 220 submodel 0;
#X obj 59 38 ø.model my_submodel;
#X obj 62 92 ø.param foo;
#N canvas 34 409 230 166 subsubmodel 0;
#X obj 40 37 ø.model my_subsubmodel;
#X obj 43 92 ø.param foo;
#X restore 61 142 pd subsubmodel;
#X restore 67 258 pd submodel;
#X text 39 162 The namespace will reflect the patcher hierarchy.;
#N canvas 0 151 228 212 submodel 0;
#N canvas 0 180 239 183 submodel 0;
#X obj 42 40 ø.model my_subsubmodel;
#X obj 45 95 ø.param foo;
#X restore 45 139 pd submodel;
#X obj 43 32 ø.model my_submodel;
#X obj 46 87 ø.param foo;
#X restore 155 258 pd submodel;
#X text 158 81 You can have only one [ossia.model] per patcher.;
#X text 59 184 click;
#X obj 41 80 ø.model my_model;
#N canvas 0 22 203 171 print-namespace 0;
#X obj 50 31 inlet;
#X obj 50 58 ossia;
#X obj 50 80 route namespace;
#X obj 50 102 print namespace;
#X connect 0 0 1 0;
#X connect 1 0 2 0;
#X connect 2 0 3 0;
#X restore 103 209 pd print-namespace;
#X text 36 38 This helps creating complex and nested address hierarchies
(a.k.a. namespaces) to sort numerous parameters by functionnality.
, f 94;
#X text 36 18 [ø.model] creates a node under which several [ø.param]s
(and models) can subscribe, f 94;
#X text 37 108 All params in the same patcher (or supatchers without
an [ø.model]) will subscribe under this model, f 99;
#X text 174 184 to print the namespace in Pd's console;
#N canvas 307 374 473 124 ossia/ø 0;
#X text 62 56 ossia.theNameOftheObject;
#X text 47 28 all ossia-pd objects can indifferently be named:;
#X text 63 76 ø.theNameOftheObject;
#X restore 569 337 pd ossia/ø;
#X text 39 232 More [ø.model]s can be added to subpatchers \, and
they will subscribe in lower hierarchical levels., f 99;
#X text 40 338 Feel free to duplicate/remove params and models and
see the consequences on the namespace, f 90;
#X text 41 294 Note that \, if 2 or more models have the same name
at the same level (like in this example \, with two submodels being
named identically) \, they will be registered as the next available
instance (instances are appended to the node name \, after a dot separator)
, f 97;
#X connect 0 0 8 0;
